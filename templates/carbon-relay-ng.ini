instance = "default"

max_procs = 2

listen_addr = "0.0.0.0:2013"
admin_addr = "0.0.0.0:2014"
http_addr = "0.0.0.0:8081"
#spool_dir = "/var/spool/carbon-relay-ng"
spool_dir = "spool"
#pid_file = "/var/run/carbon-relay-ng.pid"
pid_file = "carbon-relay-ng.pid"
#one of critical error warning notice info debug
log_level = "notice"
# How long to keep track of invalid metrics seen
# Useful time units are "s", "m", "h"
bad_metrics_max_age = "24h"
# Metric name validation strictness for legacy metrics. Valid values are:
# strict - Block anything that can upset graphite: valid characters are [A-Za-z0-9_-.]; consecutive dots are not allowed
# medium - Valid characters are ASCII; no embedded NULLs
# none   - No validation is performed
validation_level_legacy = "medium"
# Metric validation for carbon2.0 (metrics2.0) metrics.
# Metrics that contain = or _is_ are assumed carbon2.0.
# Valid values are:
# medium - checks for unit and mtype tag, presence of another tag, and constency (use = or _is_, not both)
# none   - No validation is performed
validation_level_m20 = "medium"

# you can also validate that each series has increasing timestamps
validate_order = false

# put init commands here, in the same format as you'd use for the telnet interface
# here's some examples:
init = [
     'addRoute sendAllMatch carbon-default  {{ node.ip.default_dev.ip }}:2003 spool=true pickle=false',
]

[instrumentation]
# in addition to serving internal metrics via expvar, you can optionally send em to graphite
graphite_addr = ""  # localhost:2003 (how about feeding back into the relay itself? :)
graphite_interval = 1000  # in ms
